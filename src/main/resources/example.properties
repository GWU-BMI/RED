# vtt.file: At least one is required. Specifies the VTT format input. May be
#	specified multiple times in order to read from multiple files.
vtt.file=

# label: At least one is required. Specifies the label of the annotations in
#	the VTT file that will be used. May be specified multiple times in order
#	to use multiple labels.
label=

# allow.overmatches: optional, default=true. If true, then if a predicted
#	text region overlaps an annotated text region it is counted as
#	correct. If false then the predicted text must have exactly the same
#	boundaries as an annotated text region to be considered correct.
allow.overmatches=true

# case.insensitive: optional, default=true. If true, then strings are
#	considered equal if they only differ in the uppercase/lowercase of
#	characters.
case.insensitive=true

# shuffle: optional, default=true. If true, then the order of the samples
#	is randomly shuffled before training, making the results
#	non-deterministic. If results need to be deterministic, such as for
#	testing, then this can set to false.
shuffle=true

# snippet.limit: optional, default=-1 which means no limit. This can be used
#	to limit the number of snippets read from the VTT file(s), mainly useful
#	for testing.
snippet.limit=-1

# model.output.file: optional for crossvalidate, required for buildmodel.
#	Specifies the file name for the model file. If not specified for
#	crossvalidate then no final model, and no model file, will be created.
model.output.file=

# holdout: optional. Specifies a word that should not removed or replaced
#	during the regular expression generation process. May be specified
#	multiple times or not at all. 
holdout=

# use.tier2: optional, default=true. The regular expression generation
#	process generates 2 tiers of regular expressions. Tier 1 uses strict
#	criteria for determining positive matches, while Tier 2 uses more relaxed
#	criteria. This results in Tier 1 having better precision, and Tier 2
#	better recall. Matches are attempted from Tier 1 first, and if no matches
#	are found then Tier 2. In some cases Tier 2 can result in too many false
#	positives, in which case use.tier2 can be set to false.
use.tier2=true

# generalize.capture.groups: optional, default=true. If true, then the
#	annotated values are eligible for regular expression generalization. May
#	be set to false in cases where only specific values are allowed.
generalize.capture.groups=true

# use.re2j: optional, default=false. If true then the re2j regular expression
#	engine will be used instead of the native java.util.regex engine. May
#	result in higher performance in some rare cases.
use.re2j=false

# log.file: optional. If specified, then console output will also be written
#	to the specified file.
log.file=

#### for crossvalidate only
# folds: optional, default=10. The number of folds to use in cross validation.
folds=10

# regex.output.file: optional. If specified then the generated regular
#	expressions will be written to this file (as well as the model file). Can
#	useful for testing/debugging.
regex.output.file=

# stop.after.first.fold: optional, default=false. If true then cross-
#	validation will stop after the first fold. Can useful for
#	testing/debugging.
stop.after.first.fold=false
